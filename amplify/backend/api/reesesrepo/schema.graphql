type User @model {
  id: ID!
  userName: String!
  email: String
  hosting: [Party] @connection(name: "hostList")
  gifts: [Gift] @connection(name: "GiftGroup")
  parties: [GuestList] @connection(name:"ConUser")
}

type GuestList @model {
  id: ID!
  inviteStatus: String
  invitee: String
  invitedUser: String
  takenTurn: Boolean
  turnOrder: Int
  user: User @connection(name: "ConUser")
  party: Party @connection(name:"ConParty")
}

type Gift @model {
  id: ID!
  title: String!
  number: Int
  partyGoer: String
  timesStolen: Int
  lastPartyGoer: String
  user: User @connection(name: "GiftGroup")
  party: Party @connection(name: "PartyGifts")
}

type Party @model {
  id: ID!
  title: String!
  hostedOn: String
  hostedAt: String
  partyDateAWS: AWSDate
  partyDate: String
  price: String
  isReady: Boolean
  isFinished: Boolean
  stealLimit: Int
  theHost: User @connection(name: "hostList")
  users: [GuestList] @connection(name: "ConParty")
  gifts: [Gift] @connection(name: "PartyGifts")
}

type Subscription {
  onUpdateOfSpecificParty(partyId: ID!): Party
    @aws_subscribe(mutations: ["updateParty"])
}